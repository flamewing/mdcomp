language: cpp

dist: xenial
sudo: required
compiler: gcc

cache:
    directories:
        - ${TRAVIS_BUILLD_DIR}/deps

addons:
  apt:
    sources: &common_sources
      - ubuntu-toolchain-r-test
    packages: &common_depends
      - libboost-all-dev

env:
  global:
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "UOJM4pESOoVBY4E0njHNhLEex8L9k1kge76FrNwdWcz+hZJOJOErvLJv3ySjIwtL7KMWM+T7nCbkCyCsFoHtrCbBWf3HvBkuhfSqp3DJ1r+HqMkxDMAmu4xT49BOn5yfH0SmMDSpeCumUq7YSAZzoOXDuPeUEhj4wlDlP81SG8qrENdbdUxL2GuR0SlcFFEb/p/atgL6vXVIyobFbz1pjhU/swOa5KzimyKJP5cnSSU2egG3pZrT5rNIkjRXxSJd/zLNlf+k6gGWNMzwUbXp6LUhdHF1ZisF77DPjc1/hyVvIPvA/k8K7BWLEJ8+Vz3TAjOV1gSiBvpyrTdHu1gkGdKT+gYJXb9bnBdN9NQx3Z/a7ax+yAwrNM91IgJnOMx+kWtrNvOzbrZ6kevc/xRiiGAuTvmrxXGUD0W316Iq1LmghVBe95tS0uXj5v3XCuaPrvlTr4721GRFy5EEbQpoJ/8GT/f5VeGY6ZswG/yFYI868DOJ3GON/fBuqRV3NKyY/ny3jzLFfmaw9441HYhsnUOMtS7ZV6Y32xZu9UgePyTuhtdp2YcPiie6akS6KI0h+TTazPh27R4aeQgjVLnbfYYEPBcy0u1ipdzBV9yUgDFJLQZcckf6nWcIe++mUk46uxSIC1shAKhB7vOF7KE96M0BdgYnkx3Y/eK8k3Wwrn4="
    - MAKEFLAGS="-j 2"

matrix:
    include:
        ##########################################################################
        # Coverity with GCC on Linux
        ##########################################################################
        - os: linux
          compiler: gcc
          env: MATRIX_EVAL="export CXX=g++ && export CC=gcc" DO_COVERITY=1
          addons:
            apt:
              sources: *common_sources
              packages:
                - *common_depends
                - g++-7
            coverity_scan:
              project:
                name: "flamewing/mdcomp"
                description: "Assorted compression formats for the Sega Mega Drive"
              notification_email: flamewing.sonic@gmail.com
              build_command_prepend: "./autogen.sh"
              build_command: "make"
              branch_pattern: coverity_scan
          before_script:
            - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 1000
            - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 1000

        ##########################################################################
        # clang on Linux
        ##########################################################################
        - os: linux
          compiler: clang
          env: MATRIX_EVAL="export CXX=clang++ && export CC=clang" DO_COVERITY=0
          addons:
            apt:
              sources: llvm-toolchain-xenial-7
              packages:
                - *common_depends
                - clang-7
          before_script:
            - sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-7 1000
            - sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-7 1000

        ##########################################################################
        # GCC on Linux
        ##########################################################################
        - os: linux
          compiler: gcc
          env: MATRIX_EVAL="export CXX=g++ && export CC=gcc" DO_COVERITY=0
          addons:
            apt:
              sources: *common_sources
              packages:
                - *common_depends
                - g++-7
          before_script:
            - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 1000
            - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 1000

        - os: linux
          compiler: gcc
          env: MATRIX_EVAL="export CXX=g++ && export CC=gcc" DO_COVERITY=0
          addons:
            apt:
              sources: *common_sources
              packages:
                - *common_depends
                - g++-8
          before_script:
            - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 1000
            - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 1000

before_install:
  # Exit immediately if the branch is the "coverity_scan" branch and DO_COVERITY is "0"
  - if [ "$TRAVIS_BRANCH" == "coverity_scan" -a "${DO_COVERITY}" == "0" ] ; then exit 0; fi
  # Exit immediately if the branch is not the "coverity_scan" branch and DO_COVERITY is "1"
  - eval "${MATRIX_EVAL}"
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get -qq update; fi
  - if [ "$TRAVIS_BRANCH" != "coverity_scan" -a "${DO_COVERITY}" == "1" ] ; then exit 0; fi
  - if [ "${DO_COVERITY}" == "1" ]; then echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca- ; fi

script: if [ "$TRAVIS_BRANCH" != "coverity_scan" ]; then .travis/script.sh; elif [ -e cov-int/scm_log.txt ] ; then cat cov-int/scm_log.txt; fi

notifications:
  email: true
  on_success: change
  on_failure: always

